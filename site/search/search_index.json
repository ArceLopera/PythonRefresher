{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python Refresher Everyone can forget about grammar and vocabulary. The most important think is to know where to look. Sections Basics Machine Learning Algorithms Exercises","title":"Home"},{"location":"#welcome-to-python-refresher","text":"Everyone can forget about grammar and vocabulary. The most important think is to know where to look.","title":"Welcome to Python Refresher"},{"location":"#sections","text":"Basics Machine Learning Algorithms Exercises","title":"Sections"},{"location":"pythonRefresh/","text":"Python is strongly typed (i.e. types are enforced), dynamically, implicitly typed (i.e. you don\u2019t have to declare variables), case sensitive (i.e. var and VAR are two different variables) and object-oriented (i.e. everything is an object). Like C# and Java. Python Resources Free e-book Python Like You Mean It , by Ryan Soklaski, will provide a more comprehensive introduction to Python for scientific computing. The website http://www.python.org , Tutorial and doc","title":"Basics"},{"location":"pythonRefresh/#python-resources","text":"Free e-book Python Like You Mean It , by Ryan Soklaski, will provide a more comprehensive introduction to Python for scientific computing. The website http://www.python.org , Tutorial and doc","title":"Python Resources"},{"location":"PR/pyStr1/","text":"Backslashes can also be used to escape tabs or arbitrary Unicode characters. \\n represents a new line. Similarly, \\t represents a tab. Newlines will be automatically added for strings that are created using three quotes. This makes it easier to format long, multi-line texts without the need to explicitly put \\n for line breaks. print ( \"Hugo \\' s house \\n Jane \\' s mother \\t Diana \\' s dog\" ) print ( \"\"\"This is multline text\"\"\" ) print ( \"That's \\\" cool \\\" \" ) print ( \"Look, a mountain: / \\\\ \" ) print ( \"1 \\n 2 3\" ) Hugo's house Jane's mother Diana's dog This is multline text That's \"cool\" Look, a mountain: /\\ 1 2 3","title":"Backslashes"},{"location":"PR/pyStr2/","text":"String Operations : (+) concatenation (*) multiplication - Strings can also be multiplied by integers. This produces a repeated version of the original string. User Input : The input function prompts the user for input, and returns what they enter as a string print ( \"spam\" + \" eggs\" ) print ( \"spam \" * 3 ) name = input ( \"your name is?\" ) print ( \"Hello \" + name ) spam eggs spam spam spam your name is?Carlos Hello Carlos","title":"String operations"},{"location":"PR/pyStr3/","text":"str.format() String formatting uses a string's format method to substitute a number of arguments in the string. Each argument of the format function is placed in the string at the corresponding position, which is determined using the curly braces { }. # String formatting nums = [ 1 , 2 , 3 ] msg = \"Numbers {0} {1} {2} \" . format ( nums [ 1 ], nums [ 0 ], nums [ 2 ]) print ( msg ) Numbers 2 1 3 String formatting can also be done with named arguments. a = \" {x} , {y} \" . format ( y = 12 , x = 4 ) print ( a ) 4 , 12 x = 42 print ( 'The number is {:b} ' . format ( x )) The number is 101010 count(str) returns how many times the str substring appears in the given string. upper() converts the string to uppercase. lower() converts the string to lowercase. replace(old, new) replaces all occurrences of old with new. len(str) returns the length of the string (number of characters). Note, that these functions return a new string with the corresponding manipulation Fstrings (Literal String Interpolation) After Python 3.6, to create an f-string, prefix the string with the letter \u201c f \u201d. The string itself can be formatted in much the same way that you would with str.format(). F-strings provide a concise and convenient way to embed python expressions inside string literals for formatting. Simply it is a shortcut for the format method. # Prints today's date with help # of datetime library import datetime today = datetime . datetime . today () print ( f \" { today : %B %d, %Y } \" ) July 30, 2021 name = \"Eric Idle\" f \" { name . lower () } is funny.\" eric idle is funny. x = 42 print ( f 'The number is { x : b } ' ) The number is 101010 name = 'CarPool' age = 23 print ( f \"Hello, My name is { name } and I'm { age } years old.\" ) Hello, My name is CarPool and I'm 23 years old. Template string from string import Template def main (): # Usual string formatting with format() str1 = \"Love {0} and {1} \" . format ( \"Pollo\" , \"Pitas\" ) print ( str1 ) # create a template with placeholders templ = Template ( \"Love $ {title} and $ {author} \" ) # use the substitute method with keyword arguments str2 = templ . substitute ( title = \"Pollo\" , author = \"Pitas\" ) print ( str2 ) # use the substitute method with a dictionary data = { \"author\" : \"Pitas\" , \"title\" : \"Pollo\" } str3 = templ . substitute ( data ) print ( str3 ) if __name__ == \"__main__\" : main () Love Pollo and Pitas Love Pollo and Pitas Love Pollo and Pitas","title":"String formatting"},{"location":"PR/pyStr3/#strformat","text":"String formatting uses a string's format method to substitute a number of arguments in the string. Each argument of the format function is placed in the string at the corresponding position, which is determined using the curly braces { }. # String formatting nums = [ 1 , 2 , 3 ] msg = \"Numbers {0} {1} {2} \" . format ( nums [ 1 ], nums [ 0 ], nums [ 2 ]) print ( msg ) Numbers 2 1 3 String formatting can also be done with named arguments. a = \" {x} , {y} \" . format ( y = 12 , x = 4 ) print ( a ) 4 , 12 x = 42 print ( 'The number is {:b} ' . format ( x )) The number is 101010 count(str) returns how many times the str substring appears in the given string. upper() converts the string to uppercase. lower() converts the string to lowercase. replace(old, new) replaces all occurrences of old with new. len(str) returns the length of the string (number of characters). Note, that these functions return a new string with the corresponding manipulation","title":"str.format()"},{"location":"PR/pyStr3/#fstrings-literal-string-interpolation","text":"After Python 3.6, to create an f-string, prefix the string with the letter \u201c f \u201d. The string itself can be formatted in much the same way that you would with str.format(). F-strings provide a concise and convenient way to embed python expressions inside string literals for formatting. Simply it is a shortcut for the format method. # Prints today's date with help # of datetime library import datetime today = datetime . datetime . today () print ( f \" { today : %B %d, %Y } \" ) July 30, 2021 name = \"Eric Idle\" f \" { name . lower () } is funny.\" eric idle is funny. x = 42 print ( f 'The number is { x : b } ' ) The number is 101010 name = 'CarPool' age = 23 print ( f \"Hello, My name is { name } and I'm { age } years old.\" ) Hello, My name is CarPool and I'm 23 years old.","title":"Fstrings (Literal String Interpolation)"},{"location":"PR/pyStr3/#template-string","text":"from string import Template def main (): # Usual string formatting with format() str1 = \"Love {0} and {1} \" . format ( \"Pollo\" , \"Pitas\" ) print ( str1 ) # create a template with placeholders templ = Template ( \"Love $ {title} and $ {author} \" ) # use the substitute method with keyword arguments str2 = templ . substitute ( title = \"Pollo\" , author = \"Pitas\" ) print ( str2 ) # use the substitute method with a dictionary data = { \"author\" : \"Pitas\" , \"title\" : \"Pollo\" } str3 = templ . substitute ( data ) print ( str3 ) if __name__ == \"__main__\" : main () Love Pollo and Pitas Love Pollo and Pitas Love Pollo and Pitas","title":"Template string"},{"location":"PR/pyStr4/","text":"\u201c Format specifications \u201d are used within replacement fields contained within a format string to define how individual values are presented A general convention is that an empty format specification produces the same result as if you had called str() on the value. A non-empty format specification typically modifies the result. The general form of a standard format specifier is: format_spec [[fill]align][sign][#][0][width][grouping_option][.precision][type] fill any character align \"<\" , \">\" , \"=\" , \"^\" sign \"+\" , \"-\" , \" \" width digit+ grouping_option \"_\" , \",\" precision digit+ type \"b\", \"c\" , \"d\" , \"e\" , \"E\" , \"f\" , \"F\" , \"g\" , \"G\" , \"n\" , \"o\" , \"s\" , \"x\" , \"X\" , \"%\" Fill If a valid align value is specified, it can be preceded by a fill character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (\u201c{\u201d or \u201c}\u201d) as the fill character in a formatted string literal or when using the str.format() method. However, it is possible to insert a curly brace with a nested replacement field. This limitation doesn\u2019t affect the format() function. Align The meaning of the various alignment options is as follows: Option Meaning '<' Forces the field to be left-aligned within the available space (this is the default for most objects) '>' Forces the field to be right-aligned within the available space (this is the default for numbers) '=' Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form \u2018+000000120\u2019. This alignment option is only valid for numeric types. It becomes the default for numbers when \u20180\u2019 immediately precedes the field width '^' Forces the field to be centered within the available space ' {:>30} ' . format ( 'right aligned' ) right aligned ' {:*^30} ' . format ( 'centered' ) # use '*' as a fill char ***********centered*********** Sign Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case. The sign option is only valid for number types, and can be one of the following: Option Meaning '+' indicates that a sign should be used for both positive as well as negative numbers. '-' indicates that a sign should be used only for negative numbers (this is the default behavior). space indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers. ' {:+f} ; {:+f} ' . format ( 3.14 , - 3.14 ) # show it always +3.140000; -3.140000 ' {: f} ; {: f} ' . format ( 3.14 , - 3.14 ) # show a space for positive numbers 3.140000; -3.140000 ' {:-f} ; {:-f} ' . format ( 3.14 , - 3.14 ) # show only the minus -- same as '{:f}; {:f}' 3.140000; -3.140000 # and , and _ Option '#' option The '#' option causes the \u201calternate form\u201d to be used for the conversion. The alternate form is defined differently for different types. This option is only valid for integer, float and complex types. For integers, when binary, octal, or hexadecimal output is used, this option adds the respective prefix '0b', '0o', '0x', or '0X' to the output value. For float and complex the alternate form causes the result of the conversion to always contain a decimal-point character, even if no digits follow it. Normally, a decimal-point character appears in the result of these conversions only if a digit follows it. In addition, for 'g' and 'G' conversions, trailing zeros are not removed from the result. 'Integer in Octal: {:#o} ' . format ( 1234567 ) Correct answers: 0o4553207 'Integer in Octal: {:o} ' . format ( 1234567 ) Correct answers: 4553207 ',' option The ',' option signals the use of a comma for a thousands separator. For a locale aware separator, use the 'n' integer presentation type instead. see PEP378 ' {:,} ' . format ( 1234567890 ) 1,234,567,890 format ( 1234.5 , \"08,.1f\" ) 01,234.5 '_' option The '_' option signals the use of an underscore for a thousands separator for floating point presentation types and for integer presentation type 'd'. For integer presentation types 'b', 'o', 'x', and 'X', underscores will be inserted every 4 digits. For other presentation types, specifying this option is an error. #{:10_} for a width of 10 with _ separator. format ( 1234.5 , \"08_.1f\" ) 01_234.5 Width width is a decimal integer defining the minimum total field width, including any prefixes, separators, and other formatting characters. If not specified, then the field width will be determined by the content. When no explicit alignment is given, preceding the width field by a zero ('0') character enables sign-aware zero-padding for numeric types. This is equivalent to a fill character of '0' with an alignment type of '='. Changed in version 3.10: Preceding the width field by '0' no longer affects the default alignment for strings. Precision The precision is a decimal integer indicating how many digits should be displayed after the decimal point for presentation types 'f' and 'F', or before and after the decimal point for presentation types 'g' or 'G'. For string presentation types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The precision is not allowed for integer presentation types. points = 19 total = 22 'Correct answers: {:.2%} ' . format ( points / total ) Correct answers: 86.36% Type The type determines how the data should be presented. for strings The available string presentation types are: Type Meaning 's' String format. This is the default type for strings and may be omitted. None The same as 's'. for integers The available integer presentation types are: Type Meaning 'b' Binary format. Outputs the number in base 2. 'c' Character. Converts the integer to the corresponding unicode character before printing. 'd' Octal format. Outputs the number in base 8. 'o' Character. Converts the integer to the corresponding unicode character before printing. 'x' Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9. 'X' Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case '#' is specified, the prefix '0x' will be upper-cased to '0X' as well. 'n' Number. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters. None The same as 'd'. In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except 'n' and None). When doing so, float() is used to convert the integer to a floating point number before formatting. for float and decimal The available presentation types for float and Decimal values are: Type Meaning 'e' Scientific notation. For a given precision p, formats the number in scientific notation with the letter \u2018e\u2019 separating the coefficient from the exponent. The coefficient has one digit before and p digits after the decimal point, for a total of p + 1 significant digits. With no precision given, uses a precision of 6 digits after the decimal point for float, and shows all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'E' Scientific notation. Same as 'e' except it uses an upper case \u2018E\u2019 as the separator character. 'f' Fixed-point notation. For a given precision p, formats the number as a decimal number with exactly p digits following the decimal point. With no precision given, uses a precision of 6 digits after the decimal point for float, and uses a precision large enough to show all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'F' Fixed-point notation. Same as 'f', but converts nan to NAN and inf to INF. 'g' General format. For a given precision p >= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of 0 is treated as equivalent to a precision of 1. The precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if m <= exp < p, where m is -4 for floats and -6 for Decimals, the number is formatted with presentation type 'f' and precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the '#' option is used. With no precision given, uses a precision of 6 significant digits for float. For Decimal, the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than 1e-6 in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise. Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf, 0, -0 and nan respectively, regardless of the precision. 'G' General format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too. 'n' Number. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters. '%' Percentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign. None For float this is the same as 'g', except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully. For Decimal, this is the same as either 'g' or 'G' depending on the value of context.capitals for the current decimal context. The overall effect is to match the output of str() as altered by the other format modifiers.","title":"String formatting specifications"},{"location":"PR/pyStr4/#fill","text":"If a valid align value is specified, it can be preceded by a fill character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (\u201c{\u201d or \u201c}\u201d) as the fill character in a formatted string literal or when using the str.format() method. However, it is possible to insert a curly brace with a nested replacement field. This limitation doesn\u2019t affect the format() function.","title":"Fill"},{"location":"PR/pyStr4/#align","text":"The meaning of the various alignment options is as follows: Option Meaning '<' Forces the field to be left-aligned within the available space (this is the default for most objects) '>' Forces the field to be right-aligned within the available space (this is the default for numbers) '=' Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form \u2018+000000120\u2019. This alignment option is only valid for numeric types. It becomes the default for numbers when \u20180\u2019 immediately precedes the field width '^' Forces the field to be centered within the available space ' {:>30} ' . format ( 'right aligned' ) right aligned ' {:*^30} ' . format ( 'centered' ) # use '*' as a fill char ***********centered***********","title":"Align"},{"location":"PR/pyStr4/#sign","text":"Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case. The sign option is only valid for number types, and can be one of the following: Option Meaning '+' indicates that a sign should be used for both positive as well as negative numbers. '-' indicates that a sign should be used only for negative numbers (this is the default behavior). space indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers. ' {:+f} ; {:+f} ' . format ( 3.14 , - 3.14 ) # show it always +3.140000; -3.140000 ' {: f} ; {: f} ' . format ( 3.14 , - 3.14 ) # show a space for positive numbers 3.140000; -3.140000 ' {:-f} ; {:-f} ' . format ( 3.14 , - 3.14 ) # show only the minus -- same as '{:f}; {:f}' 3.140000; -3.140000","title":"Sign"},{"location":"PR/pyStr4/#and-and-_-option","text":"","title":"# and , and _ Option"},{"location":"PR/pyStr4/#option","text":"The '#' option causes the \u201calternate form\u201d to be used for the conversion. The alternate form is defined differently for different types. This option is only valid for integer, float and complex types. For integers, when binary, octal, or hexadecimal output is used, this option adds the respective prefix '0b', '0o', '0x', or '0X' to the output value. For float and complex the alternate form causes the result of the conversion to always contain a decimal-point character, even if no digits follow it. Normally, a decimal-point character appears in the result of these conversions only if a digit follows it. In addition, for 'g' and 'G' conversions, trailing zeros are not removed from the result. 'Integer in Octal: {:#o} ' . format ( 1234567 ) Correct answers: 0o4553207 'Integer in Octal: {:o} ' . format ( 1234567 ) Correct answers: 4553207","title":"'#' option"},{"location":"PR/pyStr4/#option_1","text":"The ',' option signals the use of a comma for a thousands separator. For a locale aware separator, use the 'n' integer presentation type instead. see PEP378 ' {:,} ' . format ( 1234567890 ) 1,234,567,890 format ( 1234.5 , \"08,.1f\" ) 01,234.5","title":"',' option"},{"location":"PR/pyStr4/#_-option","text":"The '_' option signals the use of an underscore for a thousands separator for floating point presentation types and for integer presentation type 'd'. For integer presentation types 'b', 'o', 'x', and 'X', underscores will be inserted every 4 digits. For other presentation types, specifying this option is an error. #{:10_} for a width of 10 with _ separator. format ( 1234.5 , \"08_.1f\" ) 01_234.5","title":"'_' option"},{"location":"PR/pyStr4/#width","text":"width is a decimal integer defining the minimum total field width, including any prefixes, separators, and other formatting characters. If not specified, then the field width will be determined by the content. When no explicit alignment is given, preceding the width field by a zero ('0') character enables sign-aware zero-padding for numeric types. This is equivalent to a fill character of '0' with an alignment type of '='. Changed in version 3.10: Preceding the width field by '0' no longer affects the default alignment for strings.","title":"Width"},{"location":"PR/pyStr4/#precision","text":"The precision is a decimal integer indicating how many digits should be displayed after the decimal point for presentation types 'f' and 'F', or before and after the decimal point for presentation types 'g' or 'G'. For string presentation types the field indicates the maximum field size - in other words, how many characters will be used from the field content. The precision is not allowed for integer presentation types. points = 19 total = 22 'Correct answers: {:.2%} ' . format ( points / total ) Correct answers: 86.36%","title":"Precision"},{"location":"PR/pyStr4/#type","text":"The type determines how the data should be presented.","title":"Type"},{"location":"PR/pyStr4/#for-strings","text":"The available string presentation types are: Type Meaning 's' String format. This is the default type for strings and may be omitted. None The same as 's'.","title":"for strings"},{"location":"PR/pyStr4/#for-integers","text":"The available integer presentation types are: Type Meaning 'b' Binary format. Outputs the number in base 2. 'c' Character. Converts the integer to the corresponding unicode character before printing. 'd' Octal format. Outputs the number in base 8. 'o' Character. Converts the integer to the corresponding unicode character before printing. 'x' Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9. 'X' Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case '#' is specified, the prefix '0x' will be upper-cased to '0X' as well. 'n' Number. This is the same as 'd', except that it uses the current locale setting to insert the appropriate number separator characters. None The same as 'd'. In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except 'n' and None). When doing so, float() is used to convert the integer to a floating point number before formatting.","title":"for integers"},{"location":"PR/pyStr4/#for-float-and-decimal","text":"The available presentation types for float and Decimal values are: Type Meaning 'e' Scientific notation. For a given precision p, formats the number in scientific notation with the letter \u2018e\u2019 separating the coefficient from the exponent. The coefficient has one digit before and p digits after the decimal point, for a total of p + 1 significant digits. With no precision given, uses a precision of 6 digits after the decimal point for float, and shows all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'E' Scientific notation. Same as 'e' except it uses an upper case \u2018E\u2019 as the separator character. 'f' Fixed-point notation. For a given precision p, formats the number as a decimal number with exactly p digits following the decimal point. With no precision given, uses a precision of 6 digits after the decimal point for float, and uses a precision large enough to show all coefficient digits for Decimal. If no digits follow the decimal point, the decimal point is also removed unless the # option is used. 'F' Fixed-point notation. Same as 'f', but converts nan to NAN and inf to INF. 'g' General format. For a given precision p >= 1, this rounds the number to p significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of 0 is treated as equivalent to a precision of 1. The precise rules are as follows: suppose that the result formatted with presentation type 'e' and precision p-1 would have exponent exp. Then, if m <= exp < p, where m is -4 for floats and -6 for Decimals, the number is formatted with presentation type 'f' and precision p-1-exp. Otherwise, the number is formatted with presentation type 'e' and precision p-1. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the '#' option is used. With no precision given, uses a precision of 6 significant digits for float. For Decimal, the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than 1e-6 in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise. Positive and negative infinity, positive and negative zero, and nans, are formatted as inf, -inf, 0, -0 and nan respectively, regardless of the precision. 'G' General format. Same as 'g' except switches to 'E' if the number gets too large. The representations of infinity and NaN are uppercased, too. 'n' Number. This is the same as 'g', except that it uses the current locale setting to insert the appropriate number separator characters. '%' Percentage. Multiplies the number by 100 and displays in fixed ('f') format, followed by a percent sign. None For float this is the same as 'g', except that when fixed-point notation is used to format the result, it always includes at least one digit past the decimal point. The precision used is as large as needed to represent the given value faithfully. For Decimal, this is the same as either 'g' or 'G' depending on the value of context.capitals for the current decimal context. The overall effect is to match the output of str() as altered by the other format modifiers.","title":"for float and decimal"},{"location":"PR/pyVar1/","text":"In Python, we store all pieces of data -- numbers, characters, strings, everything -- as objects, and we refer to these objects using variables. As a simple case, we can assign a variable a value using the assignment operator, which is the \"equals\" sign. Python's order of operations is the same as that of normal mathematics: parentheses first, then exponentiation, then multiplication/division, and then addition/subtraction. x = 4 y = 5 z = x + y print ( z ) stri = \"Hello\" # or stri='Hello' No difference in python between \"\" and '' print ( stri + str ( z )) a = True print ( a ) b = ( 1 == 3 ) print ( b ) 9 Hello9 True False Three tools for understanding strange objects type() function type() (what is this thing?) To inspect which type is a variable use type(). dir() function dir() (what can I do with it?) help() function help() (tell me more) print ( type ( z )) print ( type ( a )) print ( type ( stri )) print ( dir ( 2 )) #print(help(2)) <class 'int'> <class 'int'> <class 'str'> ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] Python supports addition (+), substraction(-), multiplication( ), division(/),exponentiation( *), quotient (//) and remainder(%). You can chain exponentiations together. In other words, you can rise a number to multiple powers. id() function The id() function returns identity (unique integer) of an object. print ( 'id of 5 =' , id ( 5 )) a = 5 print ( 'id of a =' , id ( a )) b = a print ( 'id of b =' , id ( b )) c = 5.0 print ( 'id of c =' , id ( c )) id of 5 = 94364870744704 id of a = 94364870744704 id of b = 94364870744704 id of c = 140097885531312 It's important to note that everything in Python is an object, even numbers, and Classes. Hence, integer 5 has a unique id. The id of the integer 5 remains constant during the lifetime. Similar is the case for float 5.5 and other objects. isinstance() function To verify the type of an object, the isinstance() function checks if the object (first argument) is an instance or subclass of classinfo class (second argument). The None Object The None object is used to represent the absence of a value. It is similar to null in other programming languages. The None object is returned by any function that doesn't explicitly return anything else.","title":"Variables"},{"location":"PR/pyVar1/#three-tools-for-understanding-strange-objects","text":"","title":"Three tools for understanding strange objects"},{"location":"PR/pyVar1/#type-function","text":"type() (what is this thing?) To inspect which type is a variable use type().","title":"type() function"},{"location":"PR/pyVar1/#dir-function","text":"dir() (what can I do with it?)","title":"dir() function"},{"location":"PR/pyVar1/#help-function","text":"help() (tell me more) print ( type ( z )) print ( type ( a )) print ( type ( stri )) print ( dir ( 2 )) #print(help(2)) <class 'int'> <class 'int'> <class 'str'> ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] Python supports addition (+), substraction(-), multiplication( ), division(/),exponentiation( *), quotient (//) and remainder(%). You can chain exponentiations together. In other words, you can rise a number to multiple powers.","title":"help() function"},{"location":"PR/pyVar1/#id-function","text":"The id() function returns identity (unique integer) of an object. print ( 'id of 5 =' , id ( 5 )) a = 5 print ( 'id of a =' , id ( a )) b = a print ( 'id of b =' , id ( b )) c = 5.0 print ( 'id of c =' , id ( c )) id of 5 = 94364870744704 id of a = 94364870744704 id of b = 94364870744704 id of c = 140097885531312 It's important to note that everything in Python is an object, even numbers, and Classes. Hence, integer 5 has a unique id. The id of the integer 5 remains constant during the lifetime. Similar is the case for float 5.5 and other objects.","title":"id() function"},{"location":"PR/pyVar1/#isinstance-function","text":"To verify the type of an object, the isinstance() function checks if the object (first argument) is an instance or subclass of classinfo class (second argument).","title":"isinstance() function"},{"location":"PR/pyVar1/#the-none-object","text":"The None object is used to represent the absence of a value. It is similar to null in other programming languages. The None object is returned by any function that doesn't explicitly return anything else.","title":"The None Object"},{"location":"PR/pyVar2/","text":"int() function:To convert it to a number str() function:To convert it to a string float() function: To convert it to a float bool() function: To convert it to a bool age = int ( input ()) print ( \"Your age is \" + str ( age ) + \" years old\" ) 15 Your age is 15 years old numbers = [ 1 , 2 , 3 , 4 , 2 , 5 ] # check if numbers is instance of list result = isinstance ( numbers , list ) print ( result ) True","title":"Type Casting"},{"location":"PR/pyVar3/","text":"The location where we can find a variable and also access it if required is called the scope of a variable. Python resolves names using the so-called LEGB rule, which is named after the Python scope for names. The letters in LEGB stand for Local, Enclosing, Global, and Built-in. When you use nested functions, names are resolved by first checking the local scope or the innermost function\u2019s local scope. Then, Python looks at all enclosing scopes of outer functions from the innermost scope to the outermost scope. If no match is found, then Python looks at the global and built-in scopes. If it can\u2019t find the name, then you\u2019ll get an error. Global Keyword Global variables are the ones that are defined and declared outside any function and are not specified to any function. They can be used by any part of the program. We only need to use the global keyword in a function if we want to do assignments or change the global variable. global is not needed for printing and accessing. Python \u201cassumes\u201d that we want a local variable due to the assignment to s inside of f(), so the first statement throws the error message. Any variable which is changed or created inside of a function is local if it hasn\u2019t been declared as a global variable. To tell Python, that we want to use the global variable, we have to use the keyword \u201cglobal\u201d a = 1 # Uses global because there is no local 'a' def f (): print ( 'Inside f() : ' , a ) # Variable 'a' is redefined as a local def g (): a = 2 print ( 'Inside g() : ' , a ) # Uses global keyword to modify global 'a' def h (): global a a = 3 print ( 'Inside h() : ' , a ) # Global scope print ( 'global : ' , a ) f () print ( 'global : ' , a ) g () print ( 'global : ' , a ) h () print ( 'global : ' , a ) global : 1 Inside f() : 1 global : 1 Inside g() : 2 global : 1 Inside h() : 3 global : 3 Nonlocal Keyword In Python, nonlocal keyword is used in the case of nested functions. This keyword works similar to the global, but rather than global, this keyword declares a variable to point to the variable of outside enclosing function, in case of nested functions. # Python program to demonstrate # nonlocal keyword print ( \"Value of a using nonlocal is : \" , end = \"\" ) def outer (): a = 5 def inner (): nonlocal a a = 10 inner () print ( a ) outer () # demonstrating without non local # inner loop not changing the value of outer a # prints 5 print ( \"Value of a without using nonlocal is : \" , end = \"\" ) def outer (): a = 5 def inner (): a = 10 inner () print ( a ) outer () Value of a using nonlocal is : 10 Value of a without using nonlocal is : 5","title":"Scope of Variables"},{"location":"PR/pyVar3/#global-keyword","text":"Global variables are the ones that are defined and declared outside any function and are not specified to any function. They can be used by any part of the program. We only need to use the global keyword in a function if we want to do assignments or change the global variable. global is not needed for printing and accessing. Python \u201cassumes\u201d that we want a local variable due to the assignment to s inside of f(), so the first statement throws the error message. Any variable which is changed or created inside of a function is local if it hasn\u2019t been declared as a global variable. To tell Python, that we want to use the global variable, we have to use the keyword \u201cglobal\u201d a = 1 # Uses global because there is no local 'a' def f (): print ( 'Inside f() : ' , a ) # Variable 'a' is redefined as a local def g (): a = 2 print ( 'Inside g() : ' , a ) # Uses global keyword to modify global 'a' def h (): global a a = 3 print ( 'Inside h() : ' , a ) # Global scope print ( 'global : ' , a ) f () print ( 'global : ' , a ) g () print ( 'global : ' , a ) h () print ( 'global : ' , a ) global : 1 Inside f() : 1 global : 1 Inside g() : 2 global : 1 Inside h() : 3 global : 3","title":"Global Keyword"},{"location":"PR/pyVar3/#nonlocal-keyword","text":"In Python, nonlocal keyword is used in the case of nested functions. This keyword works similar to the global, but rather than global, this keyword declares a variable to point to the variable of outside enclosing function, in case of nested functions. # Python program to demonstrate # nonlocal keyword print ( \"Value of a using nonlocal is : \" , end = \"\" ) def outer (): a = 5 def inner (): nonlocal a a = 10 inner () print ( a ) outer () # demonstrating without non local # inner loop not changing the value of outer a # prints 5 print ( \"Value of a without using nonlocal is : \" , end = \"\" ) def outer (): a = 5 def inner (): a = 10 inner () print ( a ) outer () Value of a using nonlocal is : 10 Value of a without using nonlocal is : 5","title":"Nonlocal Keyword"},{"location":"PR/pyVar4/","text":"del is used in Python to unset a variable or name. You can use it on variable names, but a more common use is to remove indexes from a list or dictionary. my_list1 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] print ( my_list1 ) # delete second element of my_list1 del my_list1 [ 1 ] print ( my_list1 ) # slice my_list1 from index 3 to 5 del my_list1 [ 3 : 5 ] print ( my_list1 ) [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 3, 4, 5, 6, 7, 8, 9] [1, 3, 4, 7, 8, 9] my_dict1 = { \"small\" : \"big\" , \"black\" : \"white\" , \"up\" : \"down\" } print ( my_dict1 ) # delete key-value pair with key \"black\" from my_dict1 del my_dict1 [ \"black\" ] print ( my_dict1 ) {'small': 'big', 'black': 'white', 'up': 'down'} {'small': 'big', 'up': 'down'}","title":"del Keyword"}]}